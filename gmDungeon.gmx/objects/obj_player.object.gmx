<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete floor
with(instance_nearest(x, y, obj_floor))
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parameters
gold = 0;
counter = 0;
maxHP = irandom_range(12,18);
hp = maxHP;
attack = 5;
global.move = 0;
global.p_turn = true;
inventory[0,0] = "Gold";
inventory[0,1] = "Gold";
inventory[0,2] = obj_item;
inventory[0,3] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom
/*if (keyboard_check(ord('Z'))) {
    view_wview = view_wport * 4;
    view_hview = view_hport * 4;
} else {
    view_wview = view_wport;
    view_hview = view_hport;
}
view_xview = x - (view_wview - sprite_width) / 2;
view_yview = y - (view_hview - sprite_height) / 2;
room_caption = 'Position: (' + string(x div 32) + '; ' + string(y div 32) + ')';*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP
if (counter == 10)
{
    if (hp &lt; maxHP)
    {
        hp += 1;
    }
    counter = 0;
}

if (hp &lt;= 0)
{
   // show_message("Game Over");
    //game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//Need to change floor and movement positions
if(global.move == instance_number(obj_orc) &amp;&amp; !global.p_turn)
{
    global.p_turn = true;
    global.move = 0;
    with(obj_orc)
    {
        moved = false;
    }
}
if (keyboard_check_released(vk_numpad8) || keyboard_check_released(ord('8')) &amp;&amp; global.p_turn)
{
    if (!place_meeting(x, y - movespeed, obj_wall))
    {
        target = instance_place(x, y - movespeed, obj_entity);
        if (target == noone)
        {
            y -= movespeed;
            instance_create(x, y+movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad6) || keyboard_check_released(ord('6')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x + movespeed, y, obj_wall))
    {
        target = instance_place(x + movespeed, y, obj_entity);
        if(target == noone)
        {
            x += movespeed;
            instance_create(x - movespeed, y, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad4) || keyboard_check_released(ord('4')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x - movespeed, y, obj_wall))
    {
        target = instance_place(x - movespeed, y, obj_entity);
        if(target == noone)
        {
            x -= movespeed;
            instance_create(x + movespeed, y, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad2) || keyboard_check_released(ord('2')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x, y + movespeed, obj_wall))
    {
        target = instance_place(x, y + movespeed, obj_entity);
        if (target == noone)
        {
             y += movespeed;
             instance_create(x, y - movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad1) || keyboard_check_released(ord('1')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x - movespeed, y + movespeed, obj_wall))
    {
        target = instance_place(x - movespeed, y + movespeed, obj_entity);
        if (target == noone)
        {
            x -= movespeed;
            y += movespeed;
            instance_create(x + movespeed, y - movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad3) || keyboard_check_released(ord('3')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x + movespeed, y + movespeed, obj_wall))
    {
        target = instance_place(x + movespeed, y + movespeed, obj_entity);
        if(target == noone)
        {
            y += movespeed;
            x += movespeed;
            instance_create(x - movespeed, y - movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad7) || keyboard_check_released(ord('7')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x - movespeed, y - movespeed, obj_wall))
    {
        target = instance_place(x - movespeed, y - movespeed, obj_entity);
        if (target == noone)
        {
            x -= movespeed;
            y -= movespeed;
            instance_create(x + movespeed, y + movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_numpad9) || keyboard_check_released(ord('9')) &amp;&amp; global.p_turn == true)
{
    if (!place_meeting(x + movespeed, y - movespeed, obj_wall))
    {
        target = instance_place(x + movespeed, y - movespeed, obj_entity);
        if (target == noone)
        {
            y -= movespeed;
            x += movespeed;
            instance_create(x - movespeed, y + movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter += 1;
        global.p_turn = false;
    }
}
target = instance_place(x, y, obj_floor);
if (instance_exists(target))
{
    with(target)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arrow Key Movement
if (keyboard_check_released(vk_left) &amp;&amp; global.p_turn)
{
    if (!place_meeting(x - movespeed, y, obj_wall))
    {
        target = instance_place(x - movespeed, y, obj_entity);
        if (target == noone)
        {
            x -= movespeed;
            instance_create(x + movespeed, y, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter++;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_right) &amp;&amp; global.p_turn)
{
    if (!place_meeting(x + movespeed, y, obj_wall))
    {
        target = instance_place(x + movespeed, y, obj_entity);
        if (target == noone)
        {
            x += movespeed;
            instance_create(x - movespeed, y, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter++;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_up) &amp;&amp; global.p_turn)
{
    if (!place_meeting(x, y - movespeed, obj_wall))
    {
        target = instance_place(x, y - movespeed, obj_entity);
        if (target == noone)
        {
            y -= movespeed;
            instance_create(x, y + movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter++;
        global.p_turn = false;
    }
}
if (keyboard_check_released(vk_down) &amp;&amp; global.p_turn)
{
    if (!place_meeting(x, y + movespeed, obj_wall))
    {
        target = instance_place(x, y + movespeed, obj_entity);
        if (target == noone)
        {
            y += movespeed;
            instance_create(x, y - movespeed, obj_floor);
        }
        else
        {
            target.hp-=attack;
        }
        counter++;
        global.p_turn = false;
    }
}
target = instance_place(x, y, obj_floor);
if (instance_exists(target))
{
    with(target)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collect Items
target = instance_place(x, y, obj_gold);
if(target!= noone)
{
    gold += target.amount;
    inventory[0,3] += target.amount;
    with(target)
        instance_destroy();
}

window_set_caption(string(gold));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Commands
if (place_meeting(x,y,obj_down) &amp;&amp; keyboard_check_released(190) &amp;&amp; keyboard_check_released(vk_shift) &amp;&amp; global.p_turn)
{
    if (room_next(room) != -1)
    {
        room_goto(room_next(room));
    }
    global.toughness+=1;
}
if (place_meeting(x,y,obj_up) &amp;&amp; keyboard_check_released(188) &amp;&amp; keyboard_check_released(vk_shift) &amp;&amp; global.p_turn)
{
    if (room_previous(room) !=-1)
    {
        room_goto(room_previous(room));
    }
    global.toughness-=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_self();
draw_set_colour(c_black);
draw_rectangle(x - 352, y + 256, x + 384, y + 224, false);
draw_rectangle(x - 352, y - 224, x + 384, y - 192, false);
draw_set_colour(c_white);
draw_text(x - 344, y + 224, string(hp) + " / " + string(maxHP));
draw_text(x - 248, y + 224, "Floor:" + string(global.toughness));
//draw_text(room_width - window_get_width()/2-344, room_height - window_get_height()-224, string(hp) + " / " + string(maxHP));
//draw_text(room_width - window_get_width()/2-248, room_height - window_get_height()-224, "Floor:" + string(global.toughness));
//draw_text(room_width - window_get_width()/2-152, room_height - window_get_height()-224, string(inventory[0,3]));
draw_text(x - 152, y + 224, "Gold:" + string(inventory[0,3]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
