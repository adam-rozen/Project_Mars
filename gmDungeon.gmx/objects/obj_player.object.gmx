<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parameters
instance_create(x,y,obj_textbox);
first = true;
name = "";
turn = 0;
level = 1;
sleep = 0;
confused = 0;
up = false;
xp = 0;
ac = 10;
gold = 0;
levelUpRequirement[1] = 20;
for (i = 2; i &lt;= 9; i++)
{
    levelUpRequirement[i] = levelUpRequirement[i - 1] * 2;
}
levelUpRequirement[10] = 10000;
for (i = 11; i &lt;= 19; i++)
{
    levelUpRequirement[i] = levelUpRequirement[i - 10] * 1000;
}
levelUpRequirement[20] = 10000000;
for (i = 21; i &lt;= 29; i++)
{
    levelUpRequirement[i] = levelUpRequirement[i - 1] + 10000000;
}
levelUpRequirement[30] = null;
for (i = 1; i &lt;= 28; i++)
{
    maxXP[i] = levelUpRequirement[i + 1] - 1;
}
maxXP[29] = levelUpRequirement[29];
maxXP[30] = maxXP[29];
switch (global.class)
{
    case "Wizard":
        maxPW = irandom_range(5, 7);
        maxHP = 10;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 10;
        intelligence = 18;
        wisdom = 10;
        dexterity = 13;
        constitution = 13;
        charisma = 10;
        addToSpell("Force Bolt");
        break;
    case "Barbarian":
        maxPW = 1;
        maxHP = 14;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 18;
        intelligence = 7;
        wisdom = 7;
        dexterity = 17;
        constitution = 18;
        charisma = 6;
        break;
    case "Rogue":
        maxPW = 1;
        maxHP = 10;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 15;
        intelligence = 14;
        wisdom = 14;
        dexterity =18;
        constitution = 14;
        charisma = 8;
        break;
    case "Archeologist":
        maxPW = 1;
        maxHP = 11;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 12;
        intelligence = 15;
        wisdom = 15;
        dexterity = 10;
        constitution = 12;
        charisma = 10;
        break;
    case "Healer":
        maxPW = irandom_range(2,5);
        maxHP = 11;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 9;
        intelligence = 10;
        wisdom = 16;
        dexterity = 9;
        constitution = 14;
        charisma = 17;
        break;
    case "Caveman":
        maxPW = 1;
        maxHP = 14;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 18;
        intelligence = 9;
        wisdom = 9;
        dexterity = 13;
        constitution = 17;
        charisma = 8;
        break;
    case "Knight":
        maxPW = irandom_range(2,5);
        maxHP = 14;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 15;
        intelligence = 8;
        wisdom = 15;
        dexterity = 8;
        constitution = 11;
        charisma = 17;
        break;
    case "Monk":
        maxPW = irandom_range(3,4);
        maxHP = 12;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 17;
        intelligence = 10;
        wisdom = 14;
        dexterity = 14;
        constitution = 11;
        charisma = 10;
        break;
    case "Priest":
        maxPW = irandom_range(5,7);
        maxHP = 10;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 12;
        intelligence = 10;
        wisdom = 18;
        dexterity = 12;
        constitution = 13;
        charisma = 10;
        break;
    case "Ranger":
        maxPW = 1;
        maxHP = 13;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 14;
        intelligence = 10;
        wisdom = 10;
        dexterity = 18;
        constitution = 14;
        charisma = 9;
        break;
    case "Samurai":
        maxPW = 1;
        maxHP = 13;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 16;
        intelligence = 10;
        wisdom = 8;
        dexterity = 16;
        constitution = 18;
        charisma = 7;
        break;
    case "Tourist":
        maxPW = 1;
        maxHP = 8;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 11;
        intelligence = 13;
        wisdom = 9;
        dexterity = 11;
        constitution = 15;
        charisma = 16;
        break;
    case "Valkyrie":
        maxPW = 1;
        maxHP = 14;
        damageSmall[0] = 2;
        damageLarge[0] = 2;
        toHitBonus = 0;
        strength = 18;
        intelligence = 9;
        wisdom = 9;
        dexterity = 13;
        constitution = 18;
        charisma = 9;
        break;
}
pw = maxPW;
hp = maxHP;
playerNutrition = 900;
zap = false;
global.move = 0;
instance_create(x,y,obj_statusBar);
window_set_caption("The Diplomats");
global.p_turn = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom
if (keyboard_check(ord('P'))) {
    view_wview = view_wport * 4;
    view_hview = view_hport * 4;
} else {
    view_wview = view_wport;
    view_hview = view_hport;
}
view_xview = x - (view_wview - sprite_width) / 2;
view_yview = y - (view_hview - sprite_height) / 2;
room_caption = 'Position: (' + string(x div 32) + '; ' + string(y div 32) + ')';

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>room_get_name(room) != "roomInv"&amp;&amp;room_get_name(room)!="roomWield"&amp;&amp;room_get_name(room) != "roomSpell"&amp;&amp;room_get_name(room)!="roomRead" &amp;&amp; room_get_name(room) != "roomQuiver"</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Welcome Message
if (first)
{
    if (name == "")
    {
        name = get_string("Who are you?", "");
    }
    print("Welcome " + name + " the " + global.class);
    first = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP
if (hp &lt;= 0)
{
   // show_message("Game Over");
    //game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if(global.move &gt;= instance_number(obj_enemy) &amp;&amp; !global.p_turn)
{
    global.p_turn = true;
    global.move = 0;
    with(obj_enemy)
    {
        moved = false;
    }
}
if (global.p_turn)
{
    if (sleep &gt; 0)
    {
        sleep -= 1
        endPlayerTurn();
        exit;
    }
    if (keyboard_check_pressed(vk_numpad8) || keyboard_check_pressed(ord('8')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = 0;
            yMovespeed = -32;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad6) || keyboard_check_pressed(ord('6')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = 32;
            yMovespeed = 0;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad4) || keyboard_check_pressed(ord('4')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = -32;
            yMovespeed = 0;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad2) || keyboard_check_pressed(ord('2')) &amp;&amp; global.p_turn == true)
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = 0;
            yMovespeed = 32;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad1) || keyboard_check_pressed(ord('1')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = -32;
            yMovespeed = 32;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad3) || keyboard_check_pressed(ord('3')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = 32;
            yMovespeed = 32;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad7) || keyboard_check_pressed(ord('7')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = -32;
            yMovespeed = -32;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
    if (keyboard_check_pressed(vk_numpad9) || keyboard_check_pressed(ord('9')))
    {
        xMovespeed = 0;
        yMovespeed = 0;
        if (confused == 0 or (0 == choose(0,0,0,0,1)))
        {
            xMovespeed = 32;
            yMovespeed = -32;
        }
        else
        {
            xMovespeed = choose(0,32,-32)
            yMovespeed = choose(0,32,-32)
        }
        if (zap)
        {
            forceBolt(xMovespeed, yMovespeed);
        }
        else
            playerMove(xMovespeed, yMovespeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collect Items
target = instance_place(x, y, obj_gold);
if(target!= noone)
{
    gold += target.amount;
    print("You picked up " + string(target.amount) + " gold.");
    with(target)
        instance_destroy();
}
target = instance_place(x,y, obj_item);
if (target!=noone)
{
    addToInv(target);
    print("You picked up " + target.appearance + ".");
    instance_deactivate_object(target);
    show_debug_message(target.appearance);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Commands
//Down
if (place_meeting(x,y,obj_down) &amp;&amp; keyboard_check_released(190) &amp;&amp; keyboard_check(vk_shift) &amp;&amp; global.p_turn)
{
    if (room_next(room) != room_get_name(12))
    {
        global.toughness+=1;
        room_goto(room_next(room));
        print("You go down the stairs.");
        endPlayerTurn();
    }
    
}
//Up
if (place_meeting(x,y,obj_up) &amp;&amp; keyboard_check_released(188) &amp;&amp; keyboard_check(vk_shift) &amp;&amp; global.p_turn)
{
    if (room_previous(room) !=-1)
    {
        global.toughness-=1;
        room_goto(room_previous(room));
        print("You go up the stairs.");
        endPlayerTurn();
        up = true;
    }
}
//Spell (Cast)
if (keyboard_check_released(ord("Z")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomSpell);
}
//Inventory (Show)
if (keyboard_check_released(ord("I")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomInv);
}
if (keyboard_check_released(ord("V")) &amp;&amp; global.p_turn)
{
    instance_create(x, y, obj_potion);
}
//Save
if (keyboard_check_released(ord("S")) &amp;&amp; global.p_turn)
{
    scr_save();
}
//Wield
if (keyboard_check_released(ord("W")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomWield);
}
//Read
if (keyboard_check_released(ord("R")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomRead);
}
//Take Off
if (keyboard_check_released(ord("T")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomTakeOff);
}
//Read
if (keyboard_check_released(ord("R")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomRead);
}
//Quaff
if (keyboard_check_released(ord("Q")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomQuaff);
}
//Quiver
if (keyboard_check_released(ord("U")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomQuiver);
}
//Wear
if (keyboard_check_released(ord("E")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomWear);
}
//Put On
if (keyboard_check_released(ord("P")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomPutOn);
}
//Remove
if (keyboard_check_released(ord("O")) &amp;&amp; global.p_turn)
{
    global.rm = room;
    room_goto(roomRemove);
}
//Rest
if (keyboard_check_released(vk_numpad5) &amp;&amp; global.p_turn)
{
    endPlayerTurn();
}
//Fire
if (keyboard_check_released(ord("F")) &amp;&amp; global.p_turn)
{
    array = direction();
    fire(array[0], array[1]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Inventory file
file_delete("inventory.dat");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if (room_get_name(room) != "roomInv" &amp;&amp; room_get_name(room) != "roomWield" &amp;&amp; room_get_name(room) != "roomRead" &amp;&amp; room_get_name(room) != "roomSpell" &amp;&amp; room_get_name(room) != "roomQuaff" &amp;&amp; room_get_name(room) != "roomQuiver") 
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
